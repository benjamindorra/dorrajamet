// Generated by dia2code
#ifndef STATE__POLITICS__H
#define STATE__POLITICS__H

#include <vector>
#include <string>
#include <map>
#include <json.hpp>

namespace state {
  class Titles;
  class GameState;
  class Relation;
  class Characters;
  class War;
}

#include "Titles.h"
#include "Relation.h"
#include "Characters.h"
#include "War.h"

namespace state {

  /// class Politics - 
  class Politics {
    // Associations
    // Attributes
  private:
    Titles titles;
    GameState * parent;
    std::vector<Relation> relations;
    Characters characters;
    std::map<std::string, War> wars;
    // Operations
  public:
    Politics ();
    Politics (GameState * parent, std::string strJson);
    ~Politics ();
    void refreshChildParentPointers ();
    void setParent (GameState * parent);
    void debug ();
    void updateCharactersData ();
    int computeCharacterGold (std::string characterId);
    int computeCharacterPrestige (std::string characterId);
    bool checkWarStatus (std::string characterA, std::string characterB);
    void transferKingdom (std::string character_from, std::string character_to, std::string kingdomId);
    void handleCharacterDeath (std::string characterId, std::string heirId, int score);
    void updateWars ();
    void endWar (std::string warId);
    nlohmann::json getKingdomColor (std::string kingdomId);
    nlohmann::json fetchCharacterData (std::string characterId);
    nlohmann::json fetchKingdomData (std::string kingdomId);
    nlohmann::json fetchAllRelationsData ();
    std::string getKingdomHolder (std::string kingdomId);
    // Setters and Getters
  };

};

#endif
