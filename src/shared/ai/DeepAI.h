// Generated by dia2code
#ifndef AI__DEEPAI__H
#define AI__DEEPAI__H

#include <state.h>
#include <engine.h>
#include <vector>
#include <string>

namespace ai {
  class ScoreNode;
};
namespace engine {
  class Command;
};
namespace ai {
  class BasicAI;
}

#include "engine/Command.h"
#include "BasicAI.h"
#include "ScoreNode.h"

namespace ai {

  /// class DeepAI - 
  class DeepAI {
    // Associations
    // Attributes
  private:
    ScoreNode * treeRoot;
    state::GameState * gameState;
    engine::EngineCore * engine;
    std::vector<engine::Command> selectedCommands;
    // Operations
  public:
    DeepAI (state::GameState* state, engine::EngineCore * engine);
    ~DeepAI ();
    void fillTree (int turnsToCompute);
    std::vector<engine::Command> minimax ();
    void sendCommands (engine::EngineCore* engineCore, std::vector<engine::Command> commands);
    int computeScore (ScoreNode* node);
    state::GameState computeGameState (ScoreNode *  node, state::GameState* initialState);
    int generateChildren (ScoreNode * node);
    std::string viewTree (ScoreNode * currentNode);
    void fillLevel (ScoreNode* currentNode);
    void viewTreeParse (std::string tree);
    void computeLeafScores (ScoreNode* currentNode);
    int computeMaxChildren (ScoreNode* currentNode);
    void main (int turnsToCompute);
    // Setters and Getters
  };

};

#endif
